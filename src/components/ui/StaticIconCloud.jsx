'use client';

import React, { useMemo, useState, useEffect } from 'react';
import { useTheme } from 'next-themes';
import { Cloud, renderSimpleIcon } from 'react-icon-cloud';

// Import pre-built icons (will be generated by our script)
let prebuiltIcons = null;
try {
  prebuiltIcons = require('../../data/prebuilt-icons.json');
} catch (error) {
  console.warn('Pre-built icons not found, falling back to dynamic loading');
}

export const cloudProps = {
  containerProps: {
    style: {
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
      width: '100%',
      paddingTop: 40,
    },
  },
  options: {
    reverse: true,
    depth: 1,
    wheelZoom: false,
    imageScale: 2,
    activeCursor: 'default',
    tooltip: 'native',
    initial: [0.1, -0.1],
    clickToFront: 500,
    tooltipDelay: 0,
    outlineColour: '#0000',
    maxSpeed: 0.04,
    minSpeed: 0.02,
  },
};

const renderCustomIcon = (iconData, theme) => {
  const bgHex = theme === 'light' ? '#f3f2ef' : '#080510';
  const fallbackHex = theme === 'light' ? '#6e6e73' : '#ffffff';
  const minContrastRatio = theme === 'dark' ? 2 : 1.2;

  // Convert our pre-built icon data to the format expected by renderSimpleIcon
  const simpleIconFormat = {
    title: iconData.title,
    slug: iconData.slug,
    svg: iconData.svg,
    path: iconData.path,
    // Add any hex color from the SVG if available
    hex: iconData.svg.match(/fill="([^"]+)"/)?.[1] || fallbackHex
  };

  return renderSimpleIcon({
    icon: simpleIconFormat,
    bgHex,
    fallbackHex,
    minContrastRatio,
    size: 42,
    aProps: {
      role: 'presentation',
      'aria-hidden': true,
      onClick: (e) => e.preventDefault(),
    },
  });
};

const StaticIconCloud = React.memo(function StaticIconCloud({ iconSlugs }) {
  const [isMounted, setIsMounted] = useState(false);
  const { theme } = useTheme();

  useEffect(() => {
    setIsMounted(true);
  }, []);

  const renderedIcons = useMemo(() => {
    if (!prebuiltIcons || !iconSlugs || !Array.isArray(iconSlugs)) {
      return null;
    }

    const availableIcons = [];
    const missingIcons = [];

    iconSlugs.forEach(slug => {
      if (prebuiltIcons.icons[slug]) {
        availableIcons.push(prebuiltIcons.icons[slug]);
      } else {
        missingIcons.push(slug);
      }
    });

    if (missingIcons.length > 0) {
      console.warn('StaticIconCloud: Missing icons for slugs:', missingIcons);
    }

    console.log(`StaticIconCloud: Rendering ${availableIcons.length}/${iconSlugs.length} icons`);

    return availableIcons.map((iconData) =>
      renderCustomIcon(iconData, theme || 'dark')
    );
  }, [iconSlugs, theme]);

  // Show loading state until mounted
  if (!isMounted) {
    return (
      <div 
        style={{
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          width: '100%',
          height: '400px',
          paddingTop: 40,
        }}
      >
        <div className="animate-pulse text-zinc-500 dark:text-zinc-400">
          Loading skills...
        </div>
      </div>
    );
  }

  // Show message if no pre-built icons are available
  if (!prebuiltIcons) {
    return (
      <div 
        style={{
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          width: '100%',
          height: '400px',
          paddingTop: 40,
        }}
      >
        <div className="text-zinc-500 dark:text-zinc-400 text-center">
          <div className="mb-2">📦</div>
          <div className="text-sm">Pre-built icons not available</div>
          <div className="text-xs mt-1 opacity-60">Run npm run prebuild-icons</div>
        </div>
      </div>
    );
  }

  // Show message if no icons could be rendered
  if (!renderedIcons || renderedIcons.length === 0) {
    return (
      <div 
        style={{
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          width: '100%',
          height: '400px',
          paddingTop: 40,
        }}
      >
        <div className="text-zinc-500 dark:text-zinc-400 text-center">
          <div className="mb-2">🔍</div>
          <div className="text-sm">No matching icons found</div>
        </div>
      </div>
    );
  }

  return (
    <Cloud {...cloudProps}>
      <>{renderedIcons}</>
    </Cloud>
  );
});

export default StaticIconCloud;
